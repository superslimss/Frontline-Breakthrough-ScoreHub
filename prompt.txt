<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ÂâçÁ∫øÁ™ÅÂõ¥Ê¥ªÂä®ÂàÜÊï∞ÁªüËÆ°Ë°®</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Arial', sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 10px;
            color: #333;
            overflow-x: hidden;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            backdrop-filter: blur(10px);
        }

        .header {
            background: linear-gradient(135deg, #ff6b6b, #ee5a24);
            color: white;
            padding: 20px;
            text-align: center;
            position: relative;
            overflow: hidden;
        }

        .header::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: linear-gradient(45deg, transparent, rgba(255,255,255,0.1), transparent);
            animation: shine 3s infinite;
        }

        @keyframes shine {
            0% { transform: translateX(-100%) translateY(-100%) rotate(45deg); }
            100% { transform: translateX(100%) translateY(100%) rotate(45deg); }
        }

        .header h1 {
            font-size: 1.8rem;
            margin-bottom: 5px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
            position: relative;
            z-index: 1;
        }

        .header p {
            font-size: 0.9rem;
            opacity: 0.9;
            position: relative;
            z-index: 1;
        }

        .main-content {
            padding: 20px;
        }

        .score-grid {
            display: grid;
            grid-template-columns: repeat(5, 1fr);
            gap: 15px;
            margin-bottom: 20px;
        }

        .level-card {
            background: white;
            border-radius: 10px;
            padding: 15px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
            border: 2px solid transparent;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .level-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, #ff6b6b, #ee5a24, #ff6b6b);
            transform: scaleX(0);
            transition: transform 0.3s ease;
        }

        .level-card:hover::before {
            transform: scaleX(1);
        }

        .level-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.15);
            border-color: #ff6b6b;
        }

        .level-title {
            font-size: 1rem;
            font-weight: bold;
            color: #2c3e50;
            margin-bottom: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
        }

        .level-icon {
            width: 24px;
            height: 24px;
            background: linear-gradient(135deg, #ff6b6b, #ee5a24);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: bold;
            font-size: 0.8rem;
        }

        .score-input {
            width: 100%;
            padding: 10px;
            border: 2px solid #e0e6ed;
            border-radius: 8px;
            font-size: 1rem;
            text-align: center;
            background: #f8f9fa;
            transition: all 0.3s ease;
            outline: none;
        }

        .score-input:focus {
            border-color: #ff6b6b;
            background: white;
            box-shadow: 0 0 0 3px rgba(255, 107, 107, 0.1);
            transform: scale(1.02);
        }

        .score-input:hover {
            border-color: #ff6b6b;
            background: white;
        }

        .total-section {
            background: linear-gradient(135deg, #2c3e50, #34495e);
            color: white;
            padding: 20px;
            border-radius: 12px;
            text-align: center;
            margin-bottom: 20px;
            position: relative;
            overflow: hidden;
        }

        .total-section::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.1), transparent);
            animation: totalShine 2s infinite;
        }

        @keyframes totalShine {
            0% { left: -100%; }
            100% { left: 100%; }
        }

        .total-label {
            font-size: 1.2rem;
            margin-bottom: 8px;
            opacity: 0.9;
        }

        .total-score {
            font-size: 2.2rem;
            font-weight: bold;
            margin-bottom: 8px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
            position: relative;
            z-index: 1;
        }

        .total-average {
            font-size: 1rem;
            opacity: 0.8;
            position: relative;
            z-index: 1;
        }

        .controls {
            display: flex;
            gap: 10px;
            justify-content: center;
            flex-wrap: wrap;
            margin-bottom: 20px;
        }

        .btn {
            padding: 8px 16px;
            border: none;
            border-radius: 20px;
            font-size: 0.85rem;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 1px;
            position: relative;
            overflow: hidden;
        }

        .btn-primary {
            background: linear-gradient(135deg, #ff6b6b, #ee5a24);
            color: white;
        }

        .btn-secondary {
            background: linear-gradient(135deg, #74b9ff, #0984e3);
            color: white;
        }

        .btn-success {
            background: linear-gradient(135deg, #00b894, #00a085);
            color: white;
        }

        .btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: rgba(255, 255, 255, 0.2);
            transition: left 0.3s ease;
        }

        .btn:hover::before {
            left: 0;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.2);
        }

        .btn:active {
            transform: translateY(0);
        }

        .statistics {
            background: white;
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
        }

        .stats-title {
            font-size: 1.4rem;
            font-weight: bold;
            color: #2c3e50;
            margin-bottom: 20px;
            text-align: center;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 15px;
        }

        .stat-item {
            text-align: center;
            padding: 15px;
            background: #f8f9fa;
            border-radius: 10px;
            transition: all 0.3s ease;
        }

        .stat-item:hover {
            background: #e9ecef;
            transform: translateY(-2px);
        }

        .stat-value {
            font-size: 1.5rem;
            font-weight: bold;
            color: #ff6b6b;
            margin-bottom: 5px;
        }

        .stat-label {
            font-size: 0.9rem;
            color: #6c757d;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        @media (max-width: 768px) {
            .header h1 {
                font-size: 1.5rem;
            }
            
            .score-grid {
                grid-template-columns: repeat(2, 1fr);
                gap: 10px;
            }
            
            .total-score {
                font-size: 2rem;
            }
            
            .controls {
                flex-direction: column;
                align-items: center;
            }
            
            .btn {
                width: 160px;
            }
            
            .stats-grid {
                grid-template-columns: repeat(2, 1fr);
            }
        }

        @media (max-width: 480px) {
            .score-grid {
                grid-template-columns: 1fr;
            }
            
            .stats-grid {
                grid-template-columns: repeat(2, 1fr);
            }
        }

        .fade-in {
            animation: fadeIn 0.5s ease-in;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .score-updated {
            animation: scoreUpdate 0.3s ease;
        }

        @keyframes scoreUpdate {
            0% { transform: scale(1); }
            50% { transform: scale(1.1); }
            100% { transform: scale(1); }
        }
    </style>
</head>
<body>
    <div class="container fade-in">
        <div class="header">
            <h1>üéØ ÂâçÁ∫øÁ™ÅÂõ¥Ê¥ªÂä®</h1>
            <p>ÂàÜÊï∞ÁªüËÆ°Á≥ªÁªü</p>
        </div>
        
        <div class="main-content">
            <div class="score-grid">
                <div class="level-card">
                    <div class="level-title">
                        <div class="level-icon">1</div>
                        Á¨¨‰∏ÄÂÖ≥Âç°
                    </div>
                    <input type="number" class="score-input" id="level1" placeholder="ËØ∑ËæìÂÖ•Á¨¨‰∏ÄÂÖ≥ÂàÜÊï∞" min="0" step="1">
                </div>
                
                <div class="level-card">
                    <div class="level-title">
                        <div class="level-icon">2</div>
                        Á¨¨‰∫åÂÖ≥Âç°
                    </div>
                    <input type="number" class="score-input" id="level2" placeholder="ËØ∑ËæìÂÖ•Á¨¨‰∫åÂÖ≥ÂàÜÊï∞" min="0" step="1">
                </div>
                
                <div class="level-card">
                    <div class="level-title">
                        <div class="level-icon">3</div>
                        Á¨¨‰∏âÂÖ≥Âç°
                    </div>
                    <input type="number" class="score-input" id="level3" placeholder="ËØ∑ËæìÂÖ•Á¨¨‰∏âÂÖ≥ÂàÜÊï∞" min="0" step="1">
                </div>
                
                <div class="level-card">
                    <div class="level-title">
                        <div class="level-icon">4</div>
                        Á¨¨ÂõõÂÖ≥Âç°
                    </div>
                    <input type="number" class="score-input" id="level4" placeholder="ËØ∑ËæìÂÖ•Á¨¨ÂõõÂÖ≥ÂàÜÊï∞" min="0" step="1">
                </div>
                
                <div class="level-card">
                    <div class="level-title">
                        <div class="level-icon">5</div>
                        Á¨¨‰∫îÂÖ≥Âç°
                    </div>
                    <input type="number" class="score-input" id="level5" placeholder="ËØ∑ËæìÂÖ•Á¨¨‰∫îÂÖ≥ÂàÜÊï∞" min="0" step="1">
                </div>
            </div>
            
            <div class="total-section">
                <div class="total-label">ÊÄªÂàÜÊï∞</div>
                <div class="total-score" id="totalScore">0</div>
                <div class="total-average">Âπ≥ÂùáÂàÜ: <span id="averageScore">0</span></div>
            </div>
            
            <div class="controls">
                <button class="btn btn-primary" onclick="clearAllScores()">
                    üóëÔ∏è Ê∏ÖÁ©∫ÊâÄÊúâÂàÜÊï∞
                </button>
                <button class="btn btn-secondary" onclick="fillRandomScores()">
                    üé≤ ÈöèÊú∫Â°´ÂÖÖÂàÜÊï∞
                </button>
                <button class="btn btn-success" onclick="exportData()">
                    üìä ÂØºÂá∫Êï∞ÊçÆ
                </button>
            </div>
            
            <div class="statistics">
                <div class="stats-title">üìà ËØ¶ÁªÜÁªüËÆ°</div>
                <div class="stats-grid">
                    <div class="stat-item">
                        <div class="stat-value" id="maxScore">0</div>
                        <div class="stat-label">ÊúÄÈ´òÂàÜ</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-value" id="minScore">0</div>
                        <div class="stat-label">ÊúÄ‰ΩéÂàÜ</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-value" id="completedLevels">0</div>
                        <div class="stat-label">Â∑≤ÂÆåÊàêÂÖ≥Âç°</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-value" id="scoreRange">0</div>
                        <div class="stat-label">ÂàÜÊï∞Ë∑®Â∫¶</div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // ÂàÜÊï∞Êï∞ÊçÆÂ≠òÂÇ®
        let scores = {
            level1: 0,
            level2: 0,
            level3: 0,
            level4: 0,
            level5: 0
        };

        // ÂàùÂßãÂåñ‰∫ã‰ª∂ÁõëÂê¨Âô®
        function initializeEventListeners() {
            const inputs = document.querySelectorAll('.score-input');
            inputs.forEach(input => {
                input.addEventListener('input', handleScoreInput);
                input.addEventListener('focus', handleInputFocus);
                input.addEventListener('blur', handleInputBlur);
            });
        }

        // Â§ÑÁêÜÂàÜÊï∞ËæìÂÖ•
        function handleScoreInput(event) {
            const levelId = event.target.id;
            const value = parseFloat(event.target.value) || 0;
            
            // Á°Æ‰øùÂàÜÊï∞‰∏ç‰∏∫Ë¥üÊï∞
            if (value < 0) {
                event.target.value = 0;
                scores[levelId] = 0;
            } else {
                scores[levelId] = value;
            }
            
            updateTotalScore();
            updateStatistics();
            
            // Ê∑ªÂä†Âä®ÁîªÊïàÊûú
            const totalScoreElement = document.getElementById('totalScore');
            totalScoreElement.classList.add('score-updated');
            setTimeout(() => {
                totalScoreElement.classList.remove('score-updated');
            }, 300);
        }

        // ËæìÂÖ•Ê°ÜËé∑ÂæóÁÑ¶ÁÇπÊó∂ÁöÑÂ§ÑÁêÜ
        function handleInputFocus(event) {
            event.target.style.transform = 'scale(1.02)';
        }

        // ËæìÂÖ•Ê°ÜÂ§±ÂéªÁÑ¶ÁÇπÊó∂ÁöÑÂ§ÑÁêÜ
        function handleInputBlur(event) {
            event.target.style.transform = 'scale(1)';
        }

        // Êõ¥Êñ∞ÊÄªÂàÜÊï∞
        function updateTotalScore() {
            const total = Object.values(scores).reduce((sum, score) => sum + score, 0);
            const average = total / 5;
            
            document.getElementById('totalScore').textContent = total.toFixed(1);
            document.getElementById('averageScore').textContent = average.toFixed(1);
        }

        // Êõ¥Êñ∞ÁªüËÆ°‰ø°ÊÅØ
        function updateStatistics() {
            const scoreValues = Object.values(scores).filter(score => score > 0);
            const allScores = Object.values(scores);
            
            // ÊúÄÈ´òÂàÜ
            const maxScore = Math.max(...allScores);
            document.getElementById('maxScore').textContent = maxScore.toFixed(1);
            
            // ÊúÄ‰ΩéÂàÜÔºàÂè™ËÄÉËôëÂ§ß‰∫é0ÁöÑÂàÜÊï∞Ôºâ
            const minScore = scoreValues.length > 0 ? Math.min(...scoreValues) : 0;
            document.getElementById('minScore').textContent = minScore.toFixed(1);
            
            // Â∑≤ÂÆåÊàêÂÖ≥Âç°Êï∞
            const completedLevels = scoreValues.length;
            document.getElementById('completedLevels').textContent = completedLevels;
            
            // ÂàÜÊï∞Ë∑®Â∫¶
            const scoreRange = maxScore - (minScore > 0 ? minScore : maxScore);
            document.getElementById('scoreRange').textContent = scoreRange.toFixed(1);
        }

        // Ê∏ÖÁ©∫ÊâÄÊúâÂàÜÊï∞
        function clearAllScores() {
            console.log('Ê∏ÖÁ©∫ÊåâÈíÆË¢´ÁÇπÂáª');
            if (confirm('Á°ÆÂÆöË¶ÅÊ∏ÖÁ©∫ÊâÄÊúâÂàÜÊï∞ÂêóÔºü')) {
                Object.keys(scores).forEach(key => {
                    scores[key] = 0;
                    const input = document.getElementById(key);
                    if (input) {
                        input.value = '';
                    }
                });
                updateTotalScore();
                updateStatistics();
                
                // Ê∑ªÂä†Ê∏ÖÁ©∫Âä®ÁîªÊïàÊûú
                const container = document.querySelector('.container');
                if (container) {
                    container.style.animation = 'fadeIn 0.5s ease-in';
                }
                alert('ÊâÄÊúâÂàÜÊï∞Â∑≤Ê∏ÖÁ©∫ÔºÅ');
            }
        }

        // ÈöèÊú∫Â°´ÂÖÖÂàÜÊï∞
        function fillRandomScores() {
            console.log('ÈöèÊú∫Â°´ÂÖÖÊåâÈíÆË¢´ÁÇπÂáª');
            if (confirm('Á°ÆÂÆöË¶ÅÁî®ÈöèÊú∫ÂàÜÊï∞Â°´ÂÖÖÊâÄÊúâÂÖ≥Âç°ÂêóÔºü')) {
                Object.keys(scores).forEach(key => {
                    const randomScore = Math.floor(Math.random() * 1000) + 100; // 100-1099ÁöÑÈöèÊú∫ÂàÜÊï∞
                    scores[key] = randomScore;
                    const input = document.getElementById(key);
                    if (input) {
                        input.value = randomScore;
                    }
                });
                updateTotalScore();
                updateStatistics();
                alert('ÈöèÊú∫ÂàÜÊï∞Â°´ÂÖÖÂÆåÊàêÔºÅ');
            }
        }

        // ÂØºÂá∫Êï∞ÊçÆ
        function exportData() {
            console.log('ÂØºÂá∫ÊåâÈíÆË¢´ÁÇπÂáª');
            try {
                const total = Object.values(scores).reduce((sum, score) => sum + score, 0);
                const data = {
                    ÂÖ≥Âç°ÂàÜÊï∞: {
                        Á¨¨‰∏ÄÂÖ≥: scores.level1,
                        Á¨¨‰∫åÂÖ≥: scores.level2,
                        Á¨¨‰∏âÂÖ≥: scores.level3,
                        Á¨¨ÂõõÂÖ≥: scores.level4,
                        Á¨¨‰∫îÂÖ≥: scores.level5
                    },
                    ÊÄªÂàÜ: total,
                    Âπ≥ÂùáÂàÜ: (total / 5).toFixed(2),
                    ÂØºÂá∫Êó∂Èó¥: new Date().toLocaleString('zh-CN')
                };
                
                const dataStr = JSON.stringify(data, null, 2);
                const dataBlob = new Blob([dataStr], { type: 'application/json' });
                const url = URL.createObjectURL(dataBlob);
                
                const link = document.createElement('a');
                link.href = url;
                link.download = `ÂâçÁ∫øÁ™ÅÂõ¥ÂàÜÊï∞ÁªüËÆ°_${new Date().toISOString().split('T')[0]}.json`;
                link.style.display = 'none';
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
                URL.revokeObjectURL(url);
                
                alert('Êï∞ÊçÆÂØºÂá∫ÊàêÂäüÔºÅ');
            } catch (error) {
                console.error('ÂØºÂá∫Êï∞ÊçÆÊó∂Âá∫Èîô:', error);
                alert('Êï∞ÊçÆÂØºÂá∫Â§±Ë¥•ÔºåËØ∑ÈáçËØïÔºÅ');
            }
        }

        // ‰ªéÊú¨Âú∞Â≠òÂÇ®Âä†ËΩΩÊï∞ÊçÆÔºàÂ∑≤ÁßªÈô§localStorageÂäüËÉΩÔºâ
        function loadFromLocalStorage() {
            // localStorageÂäüËÉΩÂ∑≤ÁßªÈô§ÔºåÈÅøÂÖçÊ≤ôÁõíÁéØÂ¢ÉÈîôËØØ
            console.log('localStorageÂäüËÉΩÂ∑≤Á¶ÅÁî®');
        }

        // ‰øùÂ≠òÂà∞Êú¨Âú∞Â≠òÂÇ®ÔºàÂ∑≤ÁßªÈô§localStorageÂäüËÉΩÔºâ
        function saveToLocalStorage() {
            // localStorageÂäüËÉΩÂ∑≤ÁßªÈô§ÔºåÈÅøÂÖçÊ≤ôÁõíÁéØÂ¢ÉÈîôËØØ
        }

        // È°µÈù¢Âä†ËΩΩÂÆåÊàêÂêéÂàùÂßãÂåñ
        document.addEventListener('DOMContentLoaded', function() {
            console.log('È°µÈù¢Âä†ËΩΩÂÆåÊàêÔºåÂºÄÂßãÂàùÂßãÂåñ');
            
            // Á°Æ‰øùÂáΩÊï∞Âú®ÂÖ®Â±Ä‰ΩúÁî®ÂüüÂèØÁî®
            window.clearAllScores = clearAllScores;
            window.fillRandomScores = fillRandomScores;
            window.exportData = exportData;
            
            initializeEventListeners();
            updateTotalScore();
            updateStatistics();
            
            // È™åËØÅÊåâÈíÆÊòØÂê¶Â≠òÂú®
            const buttons = document.querySelectorAll('.btn');
            console.log('ÊâæÂà∞ÊåâÈíÆÊï∞Èáè:', buttons.length);
            buttons.forEach((btn, index) => {
                console.log(`ÊåâÈíÆ ${index + 1}:`, btn.textContent.trim());
            });
            
            // Ê∑ªÂä†ÈîÆÁõòÂø´Êç∑ÈîÆÊîØÊåÅ
            document.addEventListener('keydown', function(event) {
                if (event.ctrlKey) {
                    switch(event.key) {
                        case 'r':
                            event.preventDefault();
                            fillRandomScores();
                            break;
                        case 'd':
                            event.preventDefault();
                            clearAllScores();
                            break;
                        case 's':
                            event.preventDefault();
                            exportData();
                            break;
                    }
                }
            });
        });

        // È°µÈù¢Âç∏ËΩΩÂâç‰∏çÂÜçÈúÄË¶Å‰øùÂ≠òÊï∞ÊçÆ
        // window.addEventListener('beforeunload', saveToLocalStorage);
    </script>
</body>
</html>


Êää‰ª£Á†ÅÊõ¥Êç¢ÊàêÊàë‰∏äÈù¢ÂÜôÁöÑËøô‰∫õÔºå Âπ∂‰∏îËß£ÂÜ≥Ê∏ÖÁ©∫ÊåâÈíÆË¢´ÁÇπÂáªÈöèÊú∫Â°´ÂÖÖÊåâÈíÆË¢´ÁÇπÂáªÂØºÂá∫ÊåâÈíÆË¢´ÁÇπÂáª  ÁÇπÂáªËøô‰∏â‰∏™ÊåâÈíÆÈÉΩÊ≤°ÊúâÂèçÂ∫îÁöÑÈóÆÈ¢ò